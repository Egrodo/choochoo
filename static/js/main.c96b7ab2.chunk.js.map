{"version":3,"sources":["css/App.module.css","css/reusables/NetworkDialogue.module.css","components/reusables/Spinner.js","assets/images/sunny-day.webp","css/reusables/Spinner.module.css","components/reusables/NetworkDialogue.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","imgContainer","headerImg","centerSpinner","NetworkDialogue","active","blink","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_css_reusables_Spinner_module_css__WEBPACK_IMPORTED_MODULE_1__","_css_reusables_Spinner_module_css__WEBPACK_IMPORTED_MODULE_1___default","Spinner","a","createElement","className","CSS","p","_ref","message","react_default","concat","defaultProps","WelcomeView","React","lazy","e","then","bind","MainView","SettingsView","_useState","useState","_useState2","Object","slicedToArray","stationObj","setStationObj","_useState3","_useState4","name","setName","_useState5","_useState6","line","setLine","_useState7","_useState8","view","setView","_useState9","_useState10","networkIssue","setNetworkIssue","_useState11","_useState12","reqOn","setReqOn","timerRef","useRef","networkError","msg","retry","cb","url","_len2","arguments","length","params","Array","_key2","networkRetry","tries","_len","_key","Promise","res","console","log","navigator","onLine","fetch","resp","ok","json","apply","catch","err","setTimeout","saveChanges","newName","newStationObj","newLine","Error","localStorage","setItem","JSON","stringify","visibilityChange","document","hidden","current","timer","window","undefined","clearTimeout","useEffect","checkStorage","key","getItem","parse","addEventListener","removeEventListener","src","SunAndClouds","alt","content","reusables_NetworkDialogue","react","ms","fallback","gotoSettings","initData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","components_App","getElementById","URL","process","href","origin","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c96b7ab2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ddI\",\"imgContainer\":\"App_imgContainer__2g4SJ\",\"headerImg\":\"App_headerImg__M0vWh\",\"centerSpinner\":\"App_centerSpinner__3KQW8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NetworkDialogue\":\"NetworkDialogue_NetworkDialogue__1am2Q\",\"active\":\"NetworkDialogue_active__34cWf\",\"blink\":\"NetworkDialogue_blink__2ZLWi\"};","import React from 'react';\r\nimport CSS from '../../css/reusables/Spinner.module.css';\r\n\r\nfunction Spinner() {\r\n  return (\r\n    <div className={CSS.Spinner}>\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n      <div />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","module.exports = __webpack_public_path__ + \"static/media/sunny-day.874c41f0.webp\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spinner\":\"Spinner_Spinner__ATK4d\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CSS from '../../css/reusables/NetworkDialogue.module.css';\r\n\r\nfunction NetworkDialogue({ message }) {\r\n  return (\r\n    <section className={`${CSS.NetworkDialogue} ${message && CSS.active}`}>\r\n      {message}\r\n      <span>.</span><span>.</span><span>.</span>\r\n    </section>\r\n  );\r\n}\r\n\r\nNetworkDialogue.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nNetworkDialogue.defaultProps = {\r\n  message: '',\r\n};\r\n\r\nexport default NetworkDialogue;\r\n","import React, { Suspense, useState, useEffect, useRef } from 'react';\r\nimport SunAndClouds from '../assets/images/sunny-day.webp';\r\nimport NetworkDialogue from './reusables/NetworkDialogue';\r\nimport Spinner from './reusables/Spinner';\r\nimport CSS from '../css/App.module.css';\r\n\r\nconst WelcomeView = React.lazy(() => import('./views/WelcomeView'));\r\nconst MainView = React.lazy(() => import('./views/MainView'));\r\nconst SettingsView = React.lazy(() => import('./views/SettingsView'));\r\n\r\n// TODO: Setup theming system with context and make different themes for night, stormy, etc.\r\nfunction App() {\r\n  const [stationObj, setStationObj] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [line, setLine] = useState('');\r\n  const [view, setView] = useState('');\r\n\r\n  const [networkIssue, setNetworkIssue] = useState('');\r\n  const [reqOn, setReqOn] = useState(true);\r\n  const timerRef = useRef();\r\n\r\n  const networkRetry = (tries, cb, url, ...params) => {\r\n    if (tries === 0) {\r\n      setNetworkIssue('Tries exceeded, try reloading?');\r\n      return false;\r\n    }\r\n\r\n    return new Promise(res => {\r\n      console.log(`Retrying network, attempt: ${tries}`);\r\n      if (navigator.onLine) {\r\n        fetch(url)\r\n          .then(resp => {\r\n            if (!resp.ok) throw resp;\r\n            return resp.json();\r\n          })\r\n          .then(json => {\r\n            // If we're back online invoke the cb and undo errors.\r\n            if (cb) cb(json, ...params);\r\n            res(true);\r\n            setNetworkIssue('');\r\n          })\r\n          .catch(err => {\r\n            if (networkIssue !== 'Unable to connect to server') setNetworkIssue('Unable to connect to server');\r\n            console.log('Error caught: ', err);\r\n            // If sill offline, wait 10 seconds and try again.\r\n            setTimeout(() => networkRetry(tries - 1, cb, url, ...params), 10 * 1000);\r\n          });\r\n      } else {\r\n        if (!networkIssue) setNetworkIssue('Internet down');\r\n        setTimeout(() => networkRetry(tries - 1, cb, url, ...params), 10 * 1000);\r\n      }\r\n    });\r\n  };\r\n\r\n  // When invoked, check if the user is online. If they are, check if the server is online.\r\n  const networkError = (msg, retry, cb, url, ...params) => {\r\n    if (retry && !networkIssue) {\r\n      // If requested to retry, send to async network retry system.\r\n      networkRetry(5, cb, url, ...params);\r\n    } else {\r\n      // Using this for rate limit, but it's usable for other things.\r\n      setNetworkIssue(msg);\r\n    }\r\n  };\r\n\r\n  const saveChanges = (newName, newStationObj, newLine) => {\r\n    // Submit the state to the localStorage.\r\n    if (!newStationObj || !newLine) {\r\n      throw new Error(\"saveChanges wasn't given proper variables\");\r\n    }\r\n\r\n    localStorage.setItem('stationObj', JSON.stringify(newStationObj));\r\n    localStorage.setItem('name', newName);\r\n    localStorage.setItem('line', newLine);\r\n    setStationObj(newStationObj);\r\n    setName(newName);\r\n    setLine(newLine);\r\n    setView('main');\r\n  };\r\n\r\n  // If the user leaves the tab for more than n seconds, pause requests and restart them when they come back.\r\n  const visibilityChange = () => {\r\n    if (document.hidden) {\r\n      if (!timerRef.current) {\r\n        const timer = window.setTimeout(() => {\r\n          // If it reaches inside here that means the page has been hidden for > 60 seconds, so stop reqs and clear self.\r\n          setReqOn(false);\r\n          timerRef.current = undefined;\r\n        }, 60 * 1000);\r\n        timerRef.current = timer;\r\n      }\r\n    } else if (timerRef.current) {\r\n      // If document becomes visible while timer is still underway, clear it.\r\n      window.clearTimeout(timerRef.current);\r\n      timerRef.current = undefined;\r\n    } else setReqOn(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // On first load check if we have data. If we don't have any data, show welcome view. If we do, show mainView.\r\n    const checkStorage = key => localStorage.getItem(key) || '';\r\n    const newName = checkStorage('name');\r\n    const newLine = checkStorage('line');\r\n    const newStationObj = JSON.parse(checkStorage('stationObj') || '{}');\r\n    setName(newName);\r\n    setLine(newLine);\r\n    setStationObj(newStationObj);\r\n    if (newStationObj && newLine) {\r\n      setView('main');\r\n    } else setView('welcome');\r\n\r\n    document.addEventListener('visibilitychange', visibilityChange);\r\n    return () => document.removeEventListener('visibilitychange', visibilityChange);\r\n\r\n    // Depending on the time of day present different themes.\r\n  }, []);\r\n\r\n  // General parent stylings setting the header img, fonts, bg color.\r\n  return (\r\n    <div className={CSS.App}>\r\n      <header className={CSS.imgContainer}>\r\n        <img src={SunAndClouds} className={CSS.headerImg} alt=\"Sun And Clouds\" />\r\n      </header>\r\n      <div className={CSS.content}>\r\n        <NetworkDialogue message={networkIssue} />\r\n        <Suspense ms={700} fallback={\r\n          <div className={CSS.centerSpinner}><Spinner /></div>\r\n        }>\r\n          {view === 'welcome' && <WelcomeView saveChanges={saveChanges} networkError={networkError} />}\r\n          {view === 'main' && (\r\n            <MainView\r\n              name={name}\r\n              stationObj={stationObj}\r\n              line={line}\r\n              reqOn={reqOn}\r\n              networkError={networkError}\r\n              gotoSettings={() => setView('settings')}\r\n            />\r\n          )}\r\n          {view === 'settings' && (\r\n            <SettingsView\r\n              initData={{\r\n                name,\r\n                stationObj,\r\n                line\r\n              }}\r\n              networkError={networkError}\r\n              saveChanges={saveChanges}\r\n            />\r\n          )}\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'normalize.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}